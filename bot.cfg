[SERVER]
host = irc.esper.net
port = 6667
channels = #testwa
#Min delay between two line sending.
floodlimit = 0.75
#Server password
password = 

[BOT]
nick = MCPBot_Reborn
cmdchar = #
#Automatically accept invites ?
autoaccept = true
#Automatically join channels in the chan list ?
autojoin = true
lognormal = botlog.log
logerrors = errors.log

[GROUPS]
any = help;versions;gp;dcc;findall;gf;version;gc;sm;gm;sf;find
wip = dcc
admin = getusers;getgroups;fsf;adduser;fsm;rmgroup;getuser;addgroup;sql;rmuser;sendraw
lock_control = lf;ulp;lm;lp;ulm;ulf

[USERS]
profmobius = admin
zeux = admin
searge|office = admin
r4wk = admin
searge = admin
cojo = maintener
bspkrs = admin
r4wk-work = admin
thvortex = admin
scottwears = admin
lunatrius = admin

[AUTH]
#Can users without a registered nick emit commands ?
allowunregistered = true
#Authentication refresh delay in seconds. Auth will be considered valid for this period.
timeout = 60

[DCC]
active = true
#Can users connect via DCC if the user is not properly IP identified ?
allowanon = false

[DATABASE]
host = 172.245.30.34
port = 5432
user = postgres
name = mcpbot
pass = MCPBot0

[NICKSERV]
#Nick of the nick server used for auth purposes
nickserv = NickServ
#Command to use to determine the ACC level of a user
nickauth = PRIVMSG {nickserv} :acc {nick}
#Regexp to parse the ACC answer
authregex = (?P<nick>.+) ACC (?P<level>[0-9])
#Regexp to parse in the nickserv msg when the nick need to be identified
nsmarker = This nickname is registered
#Reply to an identify request
nsreply = PRIVMSG {nickserv} :identify {nspass}

